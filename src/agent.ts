import OpenAI from 'openai';
import * as dotenv from 'dotenv';
import { calculatorTool, executeCalculator } from './tools';

dotenv.config();

// Configura√ß√£o simples
const client = new OpenAI({
  baseURL: 'https://models.github.ai/inference',
  apiKey: process.env.OPEN_API_GITHUB_MODEL_TOKEN
});

export class AICalculatorAgent {
  async chat(userMessage: string): Promise<string> {
    console.log(`\n üë§ Voc√™...: ${userMessage}`);

    // 1. Preparar a conversa
    const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
      {
        role:'system',
        content: 'Voc√™ √© um agente de IA especializado em c√°lculos matem√°ticos. Voc√™ pode realizar opera√ß√µes b√°sicas como adi√ß√£o, subtra√ß√£o, multiplica√ß√£o e divis√£o. Sempre forne√ßa uma explica√ß√£o clara do resultado. Entre elas alguns calculos extraordin√°rios, como calcular a raiz quadrada de um n√∫mero, calcular o fatorial de um n√∫mero, calcular a pot√™ncia de um n√∫mero, calcular o logaritmo de um n√∫mero, calcular a m√©dia de uma lista de n√∫meros, calcular a mediana de uma lista de n√∫meros, calcular a moda de uma lista de n√∫meros, calcular o desvio padr√£o de uma lista de n√∫meros, calcular a porcentagem de um n√∫mero em rela√ß√£o a outro n√∫mero e converter unidades (por exemplo, metros para quil√¥metros).',
      },
      {
        role: 'user',
        content: userMessage
      }
    ];

    // 2. Chamar a AO com as tools dispon√≠veis
    const response = await client.chat.completions.create({
      model: 'openai/gpt-4o',
      messages,
      tools: [calculatorTool], // Aqui est√° o Function Calling;
      tool_choice: 'auto' // A AI decidir√° quando usar tools
    });

    const message = response.choices[0].message;

    // 3. Verificar se a AI quer usar alguma tool
    if (message.tool_calls) {
      console.log("üîß A AI quer usar uma ferramenta...");

      messages.push({
        role: 'assistant',
        content: message.content,
        tool_calls: message.tool_calls
      });

      // 4. Executar cada tool que a AI pediu
      for (const toolCall of message.tool_calls) {
        if (toolCall.function.name === 'calculator') {
          try {
            // Pegar argumentos que a AI enviou]
            const args = JSON.parse(toolCall.function.arguments);
            console.log(`üì• AI enviou:`, args);

            // Executar a nossa calculadora:
            const result = await executeCalculator(args);
            console.log(`üì§ Resultado da calculadora:`, result);

            // Enviar o rsultado de volta para a AI
            messages.push({
              role: 'tool',
              tool_call_id: toolCall.id,
              content: JSON.stringify(result),
            });
          } catch (error) {
            console.log(`‚ùå Erro ao executar a ferramenta:`, error);
            messages.push({
              role: 'tool',
              tool_call_id: toolCall.id,
              content: JSON.stringify({ error: 'Erro ao executar a ferramenta.' })
            });
          }
        }
      }

      // 5. Pedir resposta final da AI
      const finalResponse = await client.chat.completions.create({
        model: 'openai/gpt-4o',
        messages,
      });

      return finalResponse.choices[0].message.content || 'Desculpe, n√£o consegui entender a resposta da AI.';
    }

    return message.content || 'Desculpe, n√£o consegui entender a resposta da AI.';
  }
}